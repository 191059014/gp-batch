#################################################################################
#
#                               数据源公共参数配置
#
#################################################################################
initialSize=5
minIdle=5
maxIdle=100
maxActive=20
maxWait=60000
timeBetweenEvictionRunsMillis=60000
minEvictableIdleTimeMillis=300000
#################################################################################
#
#                               数据源，多数据源以逗号分隔
#
#################################################################################
sharding.jdbc.datasource.names=ds0
#未配置分片规则的表将通过默认数据源定位-适用于单库单表，该表无需配置分片规则
sharding.jdbc.config.sharding.defaultDataSourceName=ds0
#打印sql日志
sharding.jdbc.config.sharding.props.sql.show=true
#################################################################################
#
#                               ds0库
#
#################################################################################
sharding.jdbc.datasource.ds0.type=com.alibaba.druid.pool.DruidDataSource
sharding.jdbc.datasource.ds0.driver-class-name=com.mysql.cj.jdbc.Driver
sharding.jdbc.datasource.ds0.url=jdbc:mysql://121.40.94.96:3306/test?useUnicode=true&characterEncoding=utf8&useSSL=true&serverTimezone=GMT%2B8
sharding.jdbc.datasource.ds0.username=root
sharding.jdbc.datasource.ds0.password=root3306
# 连接池的配置信息
# 初始化大小，最小，最大
sharding.jdbc.datasource.ds0.initialSize=${initialSize}
# 只需配置minIdle最小连接池数量，maxIdle已经不再使用，配置了也没效果
sharding.jdbc.datasource.ds0.minIdle=${minIdle}
# 已经不再使用，配置了也没效果
#sharding.jdbc.datasource.ds0.maxIdle=${maxIdle}
# 最大连接池数量
sharding.jdbc.datasource.ds0.maxActive=${maxActive}
# 配置获取连接等待超时的时间
sharding.jdbc.datasource.ds0.maxWait=${maxWait}
# 用来检测连接是否有效的sql
sharding.jdbc.datasource.ds0.validationQuery=SELECT 1 FROM DUAL
# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
sharding.jdbc.datasource.ds0.timeBetweenEvictionRunsMillis=${timeBetweenEvictionRunsMillis}
# 配置一个连接在池中最小生存的时间，单位是毫秒
sharding.jdbc.datasource.ds0.minEvictableIdleTimeMillis=${minEvictableIdleTimeMillis}
# t_order 订单表-分表策略
sharding.jdbc.config.sharding.tables.t_order.actual-data-nodes=ds0.t_order_$->{0..9}
sharding.jdbc.config.sharding.tables.t_order.table-strategy.inline.sharding-column=orderId
sharding.jdbc.config.sharding.tables.t_order.table-strategy.inline.algorithm-expression=t_order_$->{Integer.parseInt(orderId.substring(21)) % 10}
#sharding.jdbc.config.sharding.tables.t_order.tableStrategy.complex.shardingColumns=orderId
#sharding.jdbc.config.sharding.tables.t_order.tableStrategy.complex.algorithmClassName=com.hb.web.sharding.OrderShardingRule
#sharding.jdbc.config.sharding.tables.t_order.key-generator-column-name=orderId
# t_customer_fund_detail 客户资金流水-分表策略
